# -*- coding: utf-8 -*-
"""Copy of Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jdXIueOEOlUmc7uJte6QxJHP2msKKfG6
"""

import pandas as pd

df = pd.read_csv("/content/دیتاست چالش 1  هوش مصنوعی.csv")
display(df.head())

print(df.info(
    ))

import seaborn as sns

import matplotlib.pyplot as plt

df[df["sleep_hours_per_day"] > 12]

numeric_cols = df.select_dtypes(include=["float64","int64"]).columns

for col in numeric_cols:
  q1 = df[col].quantile(0.25)
  q3 = df[col].quantile(0.75)
  iqr = q3 - q1

outliers_list = []
for col in numeric_cols:
  q1 = df[col].quantile(0.25)
  q3 = df[col].quantile(0.75)
  iqr = q3 - q1

  lower_bound = q1 - 1.5*iqr
  upper_bound = q3 + 1.5*iqr

  lower_outliers = df[df[col] < lower_bound]
  upper_outliers = df[df[col] > upper_bound]

  outliers_list.append(lower_outliers)
  outliers_list.append(upper_outliers)

outliers_df = pd.concat(outliers_list)

clean_PART_DATA = df.drop(outliers_df.index)
display(clean_PART_DATA.head())

print("Shape of original data:", df.shape)
print("Shape of cleaned data:", clean_PART_DATA.shape)

for col in numeric_cols:plt.figure(figsize=(6,5))
sns.histplot(df[col], kde=True ,bins=30)
plt.title(f"distribution of {col}")
plt.show

df = df.dropna()

X = df.drop("final_grade", axis=1)
y = df["final_grade"]

X = pd.get_dummies(X, drop_first=True)

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

print("✅ داده آموزش:", X_train.shape)
print("✅ داده تست:", X_test.shape)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# تعریف مدل
model = LinearRegression()

# آموزش مدل
model.fit(X_train, y_train)

# پیش‌بینی روی داده تست
y_pred = model.predict(X_test)

# ارزیابی مدل
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("✅ خطای میانگین مربعات (MSE):", mse)
print("✅ ضریب تعیین (R2):", r2)

import matplotlib.pyplot as plt

plt.figure(figsize=(6,6))
plt.scatter(y_test, y_pred, alpha=0.7, color="blue")
plt.xlabel("مقادیر واقعی")
plt.ylabel("مقادیر پیش‌بینی‌شده")
plt.title("مقایسه پیش‌بینی با مقدار واقعی")
plt.plot([y.min(), y.max()], [y.min(), y.max()], "r--")
plt.show()

from sklearn.ensemble import RandomForestRegressor

# مدل نهایی
final_model = RandomForestRegressor(n_estimators=200, random_state=42)
final_model.fit(X, y)

import numpy as np

# ورودی جدید
new_student_data = {'study_hours_per_week': [7],
                    'sleep_hours_per_day': [4],
                    'attendance_percentage': [90],
                    'assignments_completed': [0],  # Assuming a default value
                    'participation_level': ['medium'], # Assuming a default value
                    'internet_access': ['Yes'], # Assuming a default value
                    'parental_education': ['High School'], # Assuming a default value
                    'extracurricular': ['Yes'], # Assuming a default value
                    'part_time_job': ['No'] # Assuming a default value
                    }

new_student_df = pd.DataFrame(new_student_data)

# Apply one-hot encoding to match the training data format
new_student_encoded = pd.get_dummies(new_student_df, drop_first=True)

# Ensure all columns from the original training data are present, fill with 0 if not
missing_cols = set(X.columns) - set(new_student_encoded.columns)
for c in missing_cols:
    new_student_encoded[c] = 0

# Ensure the order of columns is the same as in the training data
new_student_encoded = new_student_encoded[X.columns]


# پیش‌بینی
predicted_score = final_model.predict(new_student_encoded)
print("🎯 نمره پیش‌بینی‌شده:", predicted_score[0])

def predict_score(sleep, study, attendance, assignments_completed, participation_level, internet_access, parental_education, extracurricular, part_time_job):
    data = {'study_hours_per_week': [study],
            'sleep_hours_per_day': [sleep],
            'attendance_percentage': [attendance],
            'assignments_completed': [assignments_completed],
            'participation_level': [participation_level],
            'internet_access': [internet_access],
            'parental_education': [parental_education],
            'extracurricular': [extracurricular],
            'part_time_job': [part_time_job]
            }
    new_student_df = pd.DataFrame(data)

    # Apply one-hot encoding to match the training data format
    new_student_encoded = pd.get_dummies(new_student_df, drop_first=True)

    # Ensure all columns from the original training data are present, fill with 0 if not
    missing_cols = set(X.columns) - set(new_student_encoded.columns)
    for c in missing_cols:
        new_student_encoded[c] = 0

    # Ensure the order of columns is the same as in the training data
    new_student_encoded = new_student_encoded[X.columns]

    score = final_model.predict(new_student_encoded)[0]
    return score

# مثال استفاده:
# You will need to provide values for all the input features
print("نمره دانش‌آموز:", predict_score(8, 3, 95, 0.5, 'medium', 'Yes', 'High School', 'Yes', 'No'))

import re
import numpy as np
import pandas as pd

def extract_features(text):
    data = {}

    # مطالعه
    study = re.search(r'(\d+)\s*ساعت\s*مطالعه', text)
    data['study_hours_per_week'] = [float(study.group(1)) if study else 0]

    # خواب
    sleep = re.search(r'(\d+)\s*ساعت\s*می.?خوابه', text)
    data['sleep_hours_per_day'] = [float(sleep.group(1)) if sleep else 0]

    # حضور
    attendance = re.search(r'(\d+)%', text)
    data['attendance_percentage'] = [float(attendance.group(1))/100 if attendance else 0]

    # تکالیف انجام شده (Assuming a default or placeholder if not mentioned)
    assignments_completed = re.search(r'(\d+)\s*تکلیف\s*انجام\s*شده', text) # Example pattern
    data['assignments_completed'] = [float(assignments_completed.group(1)) if assignments_completed else 0]


    # سطح مشارکت (Assuming a default or placeholder if not mentioned, needs more sophisticated text parsing)
    participation_level_match = re.search(r'سطح مشارکت:\s*(low|medium|high)', text) # Example pattern
    data['participation_level'] = [participation_level_match.group(1) if participation_level_match else 'unknown'] # Default to 'unknown' or a sensible default


    # دسترسی به اینترنت (Assuming a default or placeholder if not mentioned)
    internet_access_match = re.search(r'دسترسی به اینترنت:\s*(Yes|No)', text) # Example pattern
    data['internet_access'] = [internet_access_match.group(1) if internet_access_match else 'unknown'] # Default to 'unknown'


    # تحصیلات والدین (Assuming a default or placeholder if not mentioned)
    parental_education_match = re.search(r'تحصیلات والدین:\s*(High School|Bachelor|Master|PhD)', text) # Example pattern
    data['parental_education'] = [parental_education_match.group(1) if parental_education_match else 'unknown'] # Default to 'unknown'


    # فعالیت فوق برنامه (Assuming a default or placeholder if not mentioned)
    extracurricular_match = re.search(r'فعالیت فوق برنامه:\s*(Yes|No)', text) # Example pattern
    data['extracurricular'] = [extracurricular_match.group(1) if extracurricular_match else 'unknown'] # Default to 'unknown'


    # شغل پاره وقت (Assuming a default or placeholder if not mentioned)
    part_time_job_match = re.search(r'شغل پاره وقت:\s*(Yes|No)', text) # Example pattern
    data['part_time_job'] = [part_time_job_match.group(1) if part_time_job_match else 'unknown'] # Default to 'unknown'


    return pd.DataFrame(data)

# ورودی متنی
text_input = "این دانش‌آموز روزی ۶ ساعت می‌خوابه، ۴ ساعت مطالعه می‌کنه و ۸۵٪ حضور داره. سطح مشارکت: medium، دسترسی به اینترنت: Yes، تحصیلات والدین: High School، فعالیت فوق برنامه: Yes، شغل پاره وقت: No، 2 تکلیف انجام شده"

# استخراج ویژگی‌ها
new_student_df = extract_features(text_input)

# اعمال One-Hot Encoding مشابه داده آموزش
new_student_encoded = pd.get_dummies(new_student_df, drop_first=True)

# اطمینان از وجود تمام ستون‌های داده آموزش، پر کردن با 0 در صورت عدم وجود
missing_cols = set(X.columns) - set(new_student_encoded.columns)
for c in missing_cols:
    new_student_encoded[c] = 0

# اطمینان از ترتیب یکسان ستون‌ها با داده آموزش
new_student_encoded = new_student_encoded[X.columns]


# پیش‌بینی
predicted_score = final_model.predict(new_student_encoded)[0]
print("🎯 نمره پیش‌بینی‌شده:", predicted_score)

# Use the last text input from the user
extracted_data = extract_features(text_input_from_user)

# Display the extracted features
print("Extracted features from the text input:")
display(extracted_data)

import re
import pandas as pd

def extract_features(text):
    data = {}

    # 🟢 مطالعه (مثال: "۴ ساعت مطالعه"، "مطالعه ۴ ساعته")
    study = re.search(r'(\d+)\s*(?:ساعت)?\s*مطالعه', text)
    data['study_hours_per_week'] = [float(study.group(1)) if study else 0]

    # 🟢 خواب (مثال: "۶ ساعت می‌خوابه"، "خوابش ۶ ساعته")
    sleep = re.search(r'(\d+)\s*(?:ساعت)?\s*(?:می.?خوابه|خواب)', text)
    data['sleep_hours_per_day'] = [float(sleep.group(1)) if sleep else 0]

    # 🟢 حضور (مثال: "۸۵٪ حضور"، "حضور ۸۵ درصد")
    attendance = re.search(r'(\d+)\s*[%٪]|\s*(\d+)\s*درصد\s*حضور', text)
    if attendance:
        val = attendance.group(1) or attendance.group(2)
        data['attendance_percentage'] = [float(val)]
    else:
        data['attendance_percentage'] = [0]

    # 🟢 تکالیف (مثال: "۲ تکلیف انجام شده"، "۵ تا homework")
    assignments = re.search(r'(\d+)\s*(?:تکلیف|homework)', text, re.IGNORECASE)
    data['assignments_completed'] = [float(assignments.group(1)) if assignments else 0]

    # 🟢 سطح مشارکت
    participation = re.search(r'(low|medium|high)', text, re.IGNORECASE)
    data['participation_level'] = [participation.group(1).lower() if participation else 'medium']

    # 🟢 دسترسی به اینترنت
    internet = re.search(r'(?:اینترنت|internet)[: ]*\s*(Yes|No)', text, re.IGNORECASE)
    data['internet_access'] = [internet.group(1).capitalize() if internet else 'No']

    # 🟢 تحصیلات والدین
    education = re.search(r'(High School|Bachelor|Master|PhD)', text, re.IGNORECASE)
    data['parental_education'] = [education.group(1) if education else 'High School']

    # 🟢 فعالیت فوق برنامه
    extra = re.search(r'(?:فوق برنامه|extracurricular)[: ]*\s*(Yes|No)', text, re.IGNORECASE)
    data['extracurricular'] = [extra.group(1).capitalize() if extra else 'No']

    # 🟢 شغل پاره وقت
    job = re.search(r'(?:شغل|job|پاره وقت)[: ]*\s*(Yes|No)', text, re.IGNORECASE)
    data['part_time_job'] = [job.group(1).capitalize() if job else 'No']

    return pd.DataFrame(data)

text_input = "این دانش‌آموز ۶ ساعت خواب داره، روزی ۴ ساعت مطالعه می‌کنه، حضورش ۸۵ درصد بوده. سطح مشارکت high، اینترنت: yes، تحصیلات والدین Master، فوق برنامه: No، شغل پاره وقت: Yes، 3 homework داره."

features = extract_features(text_input)
print(features)

import streamlit as st
import pandas as pd
import re

# همون تابع extract_features که قبلاً نوشتیم
def extract_features(text):
    data = {}
    study = re.search(r'(\d+)\s*(?:ساعت)?\s*مطالعه', text)
    data['study_hours_per_week'] = [float(study.group(1)) if study else 0]
    sleep = re.search(r'(\d+)\s*(?:ساعت)?\s*(?:می.?خوابه|خواب)', text)
    data['sleep_hours_per_day'] = [float(sleep.group(1)) if sleep else 0]
    return pd.DataFrame(data)

# رابط کاربری
st.title("🎓 پیش‌بینی نمره دانش‌آموز")

user_text = st.text_area("اطلاعات دانش‌آموز را وارد کنید:", "")

if st.button("پیش‌بینی"):
    if user_text.strip():
        features = extract_features(user_text)

        # هماهنگ‌سازی ستون‌ها (X.columns باید از داده‌ی اصلی باشه)
        new_encoded = pd.get_dummies(features, drop_first=True)
        missing_cols = set(X.columns) - set(new_encoded.columns)
        for c in missing_cols:
            new_encoded[c] = 0
        new_encoded = new_encoded[X.columns]

        # پیش‌بینی
        score = final_model.predict(new_encoded)[0]
        st.success(f"🎯 نمره پیش‌بینی‌شده: {score:.2f}")
    else:
        st.warning("لطفاً اطلاعاتی وارد کنید.")

!pip install streamlit

!pip install pyngrok



from google.colab import drive
drive.mount('/content/drive')